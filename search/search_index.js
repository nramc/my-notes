var __index = {"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Welcome.!","text":"<p>The Ultimate Playbook for coding snippets, references, procedures and How-To articles based on real time experience.</p>"},{"location":"about.html","title":"About Us","text":"<ul> <li>This application contains information and reference which is being used for developer reference</li> <li>Feel free to use it if needed</li> </ul>"},{"location":"career/feedback-template.html","title":"Professional Feedback","text":""},{"location":"career/feedback-template.html#professional-feedback-template","title":"Professional Feedback Template","text":"<p>I would use such similar feedback when I ask feedback from my superior or Manager</p> <ul> <li> Overall performance and satisfaction feedback about Day-to-Day my roles &amp; responsibilities</li> <li> Feedback about Collaboration with Product Team</li> <li> Feedback about Collaboration within Team</li> <li> Feedback about Collaboration with other teams</li> <li> Feedback about Taking Ownership and Responsibilities</li> <li> Feedback about my soft skills and dedication towards commitments</li> <li> Feedback about my knowledge skills</li> <li> Commitments towards Analysing, Designing, Planning, Developing and shipping new features</li> <li> Commitments towards Problem-Solving for businesses needs</li> <li> Commitments towards maintaining and improving code qualities and reducing technical debt</li> <li> Commitment towards to bringing and implementing innovative features and ideas to improve technical and business</li> <li> Providing Technical Guidance to colleagues</li> <li> Future Expectation for my current roles and responsibilities</li> <li> Any areas you believe I can improve or further develop to enhance my performance</li> </ul>"},{"location":"development/local-development.html","title":"Local Development Essentials","text":""},{"location":"development/local-development.html#testing-e-mail-sending-feature","title":"Testing E-Mail Sending Feature","text":"<ul> <li>Mailpit is a small, fast, low memory, zero-dependency, multi-platform email testing   tool &amp; API for developers</li> <li>It acts as an SMTP server, provides a modern web interface to view &amp; test captured emails, and includes an API for   automated integration testing</li> <li>Docker with Springboot really useful for local development</li> <li>Rest API really helpful for integration testing</li> </ul>"},{"location":"development/local-development.html#testing-mongodb-documents","title":"Testing MongoDB documents","text":"<ul> <li>MongoDB docker image helps to run docker   container for local development</li> <li>MongoDB Express is one of the best tool to visualise MongoDB   content, and it's really helpful for local development to add/update/remove data from/to MongoDB</li> </ul>"},{"location":"development/validations.html","title":"Validation","text":""},{"location":"development/validations.html#phone-number-validation","title":"Phone Number Validation","text":"<ul> <li>Google provides an excellent library libphonenumber for mobile &amp; phone   number validation</li> <li>The library helps to format numbers based on geographical format</li> <li>The Library provides normalization feature to remove unwanted characters</li> <li>The Library has various distribution for many languages</li> </ul>"},{"location":"development/workstation-tools.html","title":"Developer Workstation Tools","text":"<p>Tools helps developer to improve productivity and simplify running application or services smoothly, conveniently.</p>"},{"location":"development/workstation-tools.html#useful-simple-git-configuration","title":"Useful simple Git configuration","text":"<ul> <li> <p>When you work with two or more different Git accounts and want to have different configuration for each account, you   can use conditional git configuration. For example, in my case I want to have my organisation account configurations   like company email address for internal organisation repositories and my personal email address for Open Source   repositories.</p> <pre><code># create dedciated git config for personal account in user home directory and define config.\n# in my case i want to use short name and personal email address for open source projects\ncat .gitconfig-github \n[user]\n  name = Ram\n  email = ramachandrannellai@gmail.com\n\n# configure the config in main .gitconfig conditionally\ncat .gitconfig\n# my organisation based config\n[user]\n  name = Ramachandran Nellaiyappan\n  email = ramachandran.nellaiyappan@mycompany.com\n\n[includeIf \"gitdir:~/Ram/github/\"]\n  path = .gitconfig-github\n</code></pre> </li> <li> <p>my favorite one line log format, it might help you as well</p> </li> </ul> <pre><code>  git config --global alias.onelog 'log --graph --decorate --pretty=\"%C(white) Hash: %h %C(red)Date: %ad %C(yellow) %C(blue) Author: %an %C(green)Message: %s \" --date=human'\n</code></pre> <ul> <li>one of my most frequently used git command</li> </ul> <pre><code>  git config --global alias.undo 'reset --soft HEAD~1'\n</code></pre>"},{"location":"development/workstation-tools.html#clean-as-you-code","title":"Clean as You Code","text":"<ul> <li>SonarLint Plugin for IDE: Detect bugs and code smells as early as   possible while you code</li> </ul>"},{"location":"development/workstation-tools.html#envfile-manage-environment-variables","title":"EnvFile: Manage Environment Variables","text":"<ul> <li>EnvFile allows you to set environment variables for your run   configurations from one or multiple files</li> <li>It supports YAML, JSON and .env formats</li> </ul>"},{"location":"development/workstation-tools.html#mkcert-local-trust-store-for-local-development","title":"mkcert: Local Trust store for Local Development","text":"<ul> <li>mkcert A simple zero-config tool to make locally trusted development   certificates with any names you'd like</li> <li>Using certificates from real certificate authorities(CAs) for development can be dangerous or impossible (for hosts   like example.test, localhost or 127.0.0.1), but self-signed certificates cause trust errors.</li> <li>Managing your own CA is the best solution, but usually involves arcane commands, specialized knowledge and manual   steps.</li> <li>mkcert automatically creates and installs a local CA in the system root   store, and generates locally-trusted certificates.</li> <li>mkcert does not automatically configure servers to use the   certificates, though, that's up to you.</li> </ul>"},{"location":"development/workstation-tools.html#design-and-document-your-feature","title":"Design and Document your feature","text":"<ul> <li>PlantUML IDE plugin helps us to write varies diagrams by writing code for documenting your   feature</li> </ul>"},{"location":"how-to-articles/http-client-intellij-plugin.html","title":"HTTP Client - IntelliJ Plugin","text":"<ul> <li>HTTP Client helps to create, edit, and   execute HTTP requests directly in the IntelliJ IDEA code editor.</li> <li>It provides varies features like configuring env variable file with support for environments like dev, qa and live</li> </ul>"},{"location":"how-to-articles/http-client-intellij-plugin.html#environment-files","title":"Environment files","text":"<ul> <li>create environment file in project test source directory <code>src/test/http-client/http-client.env.json</code></li> <li>Configure environment variables based on different environments</li> </ul> <pre><code>{\n  \"dev\": {\n    \"appURL\": \"https://example-dev.com\"\n  },\n  \"qa\": {\n    \"appURL\": \"https://example-qa.com\"\n  },\n  \"live\": {\n    \"appURL\": \"https://example.com\"\n  }\n}\n</code></pre>"},{"location":"how-to-articles/http-client-intellij-plugin.html#http-scripts","title":"HTTP Scripts","text":"<ul> <li>please find below sample http script from <code>src/test/http-client/scripts/</code></li> </ul> <pre><code># Constant values\n@usecase = REGISTRATION\n\n### Registration\n# this is pre javascript block executed before http request executed\n&lt; {%\nconst pepperVal = request.environment.get(\"someConfidentialEnvironmentSpecificValue\")\nconst dateUtcIsoFormat = new Date().toISOString().split('T')[0];\nconst formattedEntityVal = pepperVal + ':' + dateUtcIsoFormat;\n\nconst hashedEntity = crypto.sha256().updateWithText(formattedEntityVal, 'UTF-8').digest().toBase64(true);\n\n// Dynamically derived value added to request context and can be used in http request\nrequest.variables.set(\"dynamicHashedEntity\", hashedEntity)\n\n%}\nPOST {{appURL}}\nContent-Type: application/vnd.registration+json\n\n{\n  \"name\": \"My Name\",\n  \"emailAddress\": \"my-email-address@example.com\",\n  \"payload\": \"{\\\"signature\\\": \\\"{{hashedEntity}}\\\"}\",\n}\n\n// this is post javascript block executed after http request executed\n&gt; {%\nclient.test(\"Request executed successfully\", function () {\nclient.assert(response.status === 201, \"Response failed\");\nclient.global.set(\"emailToken\", response.body.code)\n});\n%}\n</code></pre>"},{"location":"how-to-articles/new-java-application-checklist.html","title":"New Java Application","text":""},{"location":"how-to-articles/new-java-application-checklist.html#checklist-for-new-java-application-or-service","title":"Checklist for New Java Application or Service","text":"<p>This article outlines the essential steps and considerations for Creating a new Java Application or Service</p> <ul> <li> Spring Initializr is great tool for creating initial projects with predefined initial   setup. I find it really helpful.</li> <li> Set up Sonar project for the repository. If it is open source   project, Sonar Cloud is really helpful for maintaining good   quality code</li> <li> Setup Continues Integration(CI) workflow for each commit and merge request. Feel free to have   look: Journey API | ci-build-workflow.yml</li> <li> Setup Continues Deployment(CD) workflow for automated deployment to QA &amp; LIVE environments. Feel free to have   look: Journey API | release-workflow.yml</li> <li> Docker Compose really helps and boost developer   productivity and reduce complexity for environment setup.</li> <li> Containerization: Use Docker or other container solutions to package the application consistently. Feel free to   have look Journey API | Dockerfile</li> <li> Renovate Bot integration really helps to automatically update dependencies. Feel   free to have look Journey API | renovate.json</li> <li> OpenRewrite integration really powerful tool to maintain good code quality and   automated refactoring to reduce technical debt. Feel free to have   look Journey API | rewrite.yml</li> <li> Open API with Swagger Document the code and create developer-friendly API   documentation. Personally I would recommend Open API Specification with Swagger UI. Feel free to have   look Journey API Configuration &amp; REST API Documentation</li> </ul>"},{"location":"how-to-articles/open-rewrite.html","title":"OpenRewrite Integration","text":""},{"location":"how-to-articles/open-rewrite.html#openrewrite-integration","title":"OpenRewrite Integration","text":"<p>OpenRewrite  is a powerful, automated refactoring tool designed to help developers modernize and improve their codebases efficiently.</p>"},{"location":"how-to-articles/open-rewrite.html#why-do-we-need-openrewrite","title":"Why Do We Need OpenRewrite?","text":"<ul> <li>Automated Code Refactoring:   Manually updating code can be tedious and error-prone, especially when dealing with large codebases. OpenRewrite   automates repetitive tasks like upgrading deprecated APIs, adjusting library versions, and fixing outdated patterns,   saving developers hours of manual work.</li> <li>Ensure Code Consistency:   In large teams or organizations, different developers may write code in slightly different   styles or patterns. OpenRewrite ensures that changes are applied consistently across the entire codebase, maintaining   uniformity in coding standards.</li> <li>Maintainable and Modern Code:   As programming languages evolve and libraries are updated, developers need to keep   their codebases modern. OpenRewrite simplifies this process by automatically updating APIs, language features, and   libraries without having to rewrite everything manually, allowing developers to adopt the latest best practices   effortlessly.</li> <li>Faster Technical Debt Reduction:   Over time, codebases accumulate technical debt, such as outdated code, inefficient patterns, or unused imports.   OpenRewrite helps developers tackle this debt by automating refactoring tasks, ensuring the codebase stays clean,   efficient, and manageable without requiring dedicated time for manual cleanup.</li> <li>Improve Security Automatically:   Security vulnerabilities in dependencies are a major concern for developers. OpenRewrite can automate updates to   vulnerable libraries and ensure the project is running on secure versions. This keeps the code secure without   developers needing to manually track and update dependencies.</li> <li>Easier Legacy Code Maintenance:   Legacy codebases are often difficult to maintain due to outdated technologies, libraries, or patterns. Developers can   use OpenRewrite to automatically refactor and modernize these legacy systems, improving readability, maintainability,   and performance, all while minimizing the risk of introducing bugs.</li> <li>Integrates Seamlessly with Development Workflow:   OpenRewrite works well with Maven, Gradle, and other build tools, and can be easily integrated into continuous   integration/continuous deployment (CI/CD) pipelines. This means developers don\u2019t have to change their workflow, and   refactoring can happen automatically as part of the regular development process.</li> <li>Customizable Refactoring for Specific Needs:   Sometimes, teams have specific requirements for refactoring that don\u2019t fit standard patterns. OpenRewrite allows   developers to write custom recipes tailored to their project\u2019s unique needs, enabling automatic, project-specific code   transformations that address edge cases or organizational standards.</li> <li>Future-Proofing Codebases:   By continuously applying OpenRewrite to a project, developers can ensure their codebase remains modern and adaptable   to future changes in the ecosystem. This reduces the need for large, disruptive refactorings down the line, allowing   for smoother, incremental updates.</li> <li>Improve Developer Productivity:   Developers want to focus on building new features and solving complex problems, not performing tedious refactorings.   By automating these tasks, OpenRewrite frees up time and mental energy, allowing developers to concentrate on   higher-value activities.</li> </ul>"},{"location":"how-to-articles/open-rewrite.html#getting-started","title":"Getting Started","text":"<p>Please refer official OpenRewrite guide to get started.</p>"},{"location":"how-to-articles/open-rewrite.html#binding-execution-with-maven-life-cycle-phases","title":"Binding execution with Maven Life Cycle phases","text":"<ul> <li>Instead of executing rewrite goal individually, we can also bind the execution goal with maven life cycles like   verify</li> <li>Configure rewrite plugin goal run or runNoFork with maven phase \"process-sources\" and dryRun or dryRunNoFork with \"   prepare-package\"</li> </ul> <pre><code>&lt;plugin&gt;\n    &lt;groupId&gt;org.openrewrite.maven&lt;/groupId&gt;\n    &lt;artifactId&gt;rewrite-maven-plugin&lt;/artifactId&gt;\n    &lt;version&gt;${rewrite-maven-plugin.version}&lt;/version&gt;\n\n    &lt;executions&gt;\n        &lt;!-- run recipes to make changes when enabled --&gt;\n        &lt;execution&gt;\n            &lt;id&gt;run-open-rewrite-execution&lt;/id&gt;\n            &lt;goals&gt;\n                &lt;goal&gt;runNoFork&lt;/goal&gt;\n            &lt;/goals&gt;\n            &lt;phase&gt;process-sources&lt;/phase&gt;\n        &lt;/execution&gt;\n\n        &lt;!-- dryRun execution to detect changes without making actual changes --&gt;\n        &lt;execution&gt;\n            &lt;id&gt;dry-run-open-rewrite-execution&lt;/id&gt;\n            &lt;goals&gt;\n                &lt;goal&gt;dryRunNoFork&lt;/goal&gt;\n            &lt;/goals&gt;\n            &lt;phase&gt;prepare-package&lt;/phase&gt;\n        &lt;/execution&gt;\n\n    &lt;/executions&gt;\n\n    &lt;configuration&gt;\n        &lt;failOnDryRunResults&gt;true&lt;/failOnDryRunResults&gt;\n        &lt;!-- list recipes to be executed when enabled --&gt;\n        &lt;activeRecipes&gt;\n            &lt;recipe&gt;org.openrewrite.java.RemoveUnusedImports&lt;/recipe&gt;\n        &lt;/activeRecipes&gt;\n    &lt;/configuration&gt;\n&lt;/plugin&gt;\n</code></pre>"},{"location":"how-to-articles/open-rewrite.html#integration-with-ci-cd","title":"Integration with CI &amp; CD","text":"<ul> <li>Executing dryRun goal as part of CI pipeline, helps to enforce clean code policy</li> <li>Implementing toggles with dedicated CI profile helps to control recipe executions such toggles useful for complex   projects to enable/disable recipes execution can not be applied immediately all together</li> </ul> <p>My approach below is,</p> <ol> <li>Always execute <code>rewrite:run</code> goal in developer work station to make changes in source code, so that the    changes verified by developer and corrected if required any.</li> <li>Always execute <code>rewrite:dryRun</code> goal in both developer workstation and CICD workflow to ensure clean code</li> </ol> <p>To achieve the approach, follow below steps,</p> <ul> <li>To control <code>rewrite:run</code> and <code>rewrite:dryRun</code> goals, define two toggle and set default values   <pre><code>&lt;properties&gt;\n  &lt;!-- open-rewrite \"run\" toggle which make changes in source code: default enabled  --&gt;\n  &lt;rewrite-maven-plugin.skip.run-execution&gt;false&lt;/rewrite-maven-plugin.skip.run-execution&gt;\n\n  &lt;!-- open-rewrite \"dryRun\" toggle which does make changes, instead provide report for anticipated changes: default enabled  --&gt;\n  &lt;rewrite-maven-plugin.skip.dry-run-execution&gt;false&lt;/rewrite-maven-plugin.skip.dry-run-execution&gt;\n  ...\n&lt;/properties&gt;\n</code></pre></li> <li>Disable <code>rewrite:run</code> toggle for CI profile based <code>CI</code> env variable.</li> <li>Please find below pom.xml which contains CI profile with toggle and dryRun execute in CI pipeline and recipes applied   on developer work station,   <pre><code>&lt;profiles&gt;\n  &lt;profile&gt;\n      &lt;id&gt;ci-profile&lt;/id&gt;\n      &lt;properties&gt;\n          &lt;!-- Recommendation: always disable \"run\" which makes changes to source code in CI pipeline\n           and run them only on developer workstation so that the changes reviewed manually --&gt;\n          &lt;rewrite-maven-plugin.skip.run-execution&gt;true&lt;/rewrite-maven-plugin.skip.run-execution&gt;\n      &lt;/properties&gt;\n      &lt;activation&gt;\n          &lt;property&gt;\n              &lt;name&gt;env.CI&lt;/name&gt;\n              &lt;value&gt;true&lt;/value&gt;\n          &lt;/property&gt;\n      &lt;/activation&gt;\n  &lt;/profile&gt;\n&lt;/profiles&gt;\n</code></pre></li> <li>Configure plugin with different executions with toggle,   <pre><code>&lt;plugin&gt;\n    &lt;groupId&gt;org.openrewrite.maven&lt;/groupId&gt;\n    &lt;artifactId&gt;rewrite-maven-plugin&lt;/artifactId&gt;\n    &lt;version&gt;${rewrite-maven-plugin.version}&lt;/version&gt;\n\n    &lt;executions&gt;\n        &lt;!-- Apply Recipes conditionally --&gt;\n        &lt;execution&gt;\n            &lt;id&gt;run-open-rewrite-execution&lt;/id&gt;\n            &lt;goals&gt;\n                &lt;goal&gt;runNoFork&lt;/goal&gt;\n            &lt;/goals&gt;\n            &lt;phase&gt;process-sources&lt;/phase&gt;\n            &lt;configuration&gt;\n                &lt;rewriteSkip&gt;${rewrite-maven-plugin.skip}&lt;/rewriteSkip&gt;\n            &lt;/configuration&gt;\n        &lt;/execution&gt;\n\n        &lt;!-- dryRun execution to detect changes without making actual changes --&gt;\n        &lt;execution&gt;\n            &lt;id&gt;dry-run-open-rewrite-execution&lt;/id&gt;\n            &lt;goals&gt;\n                &lt;goal&gt;dryRunNoFork&lt;/goal&gt;\n            &lt;/goals&gt;\n            &lt;phase&gt;prepare-package&lt;/phase&gt;\n        &lt;/execution&gt;\n\n    &lt;/executions&gt;\n\n    &lt;configuration&gt;\n        &lt;!-- make build fail when changes detected during dryRun, this helps to maintain clean code by forcing  --&gt;\n        &lt;failOnDryRunResults&gt;true&lt;/failOnDryRunResults&gt;\n        &lt;!-- list recipes to be executed when enabled --&gt;\n        &lt;activeRecipes&gt;\n            &lt;recipe&gt;...&lt;/recipe&gt;\n        &lt;/activeRecipes&gt;\n\n        &lt;!-- Code Formatting style to be applied --&gt;\n        &lt;activeStyles&gt;\n            &lt;style&gt;org.openrewrite.java.IntelliJ&lt;/style&gt;\n        &lt;/activeStyles&gt;\n    &lt;/configuration&gt;\n\n    &lt;dependencies&gt;\n    &lt;!-- list of external dependencies which is needed for recipes e.g. spring upgrade recipes  --&gt;\n    &lt;/dependencies&gt;\n\n&lt;/plugin&gt;\n</code></pre></li> </ul>"},{"location":"how-to-articles/open-rewrite.html#recommended-recipes","title":"Recommended Recipes","text":"<ul> <li>Below are my personal recommendations   <pre><code>---\ntype: specs.openrewrite.org/v1beta/recipe\nname: io.github.nramc.recipes.source\nrecipeList:\n  - org.openrewrite.staticanalysis.CommonStaticAnalysis\n  - org.openrewrite.staticanalysis.CodeCleanup\n  - org.openrewrite.java.security.JavaSecurityBestPractices\n  - org.openrewrite.java.security.OwaspTopTen\n  - org.openrewrite.java.RemoveUnusedImports\n  - org.openrewrite.recommendations.CodeHealth\n  - org.openrewrite.recommendations.DependencyManagement\n  - org.openrewrite.maven.BestPractices\n  - org.openrewrite.java.logging.slf4j.Slf4jBestPractices\n  - org.openrewrite.recipes.JavaRecipeBestPractices\n\n---\ntype: specs.openrewrite.org/v1beta/recipe\nname: io.github.nramc.recipes.testing\nrecipeList:\n  - org.openrewrite.java.testing.mockito.MockitoBestPractices\n  - org.openrewrite.java.testing.junit5.CleanupAssertions\n  - org.openrewrite.recipes.RecipeTestingBestPractices\n  - org.openrewrite.java.testing.junit5.StaticImports\n  - org.openrewrite.java.testing.cleanup.TestsShouldNotBePublic\n  - org.openrewrite.java.testing.cleanup.RemoveTestPrefix\n  - org.openrewrite.java.testing.cleanup.AssertLiteralBooleanToFailRecipe\n  - org.openrewrite.java.testing.testcontainers.TestContainersBestPractices\n\n\n---\n</code></pre></li> </ul>"},{"location":"how-to-articles/open-rewrite.html#key-takeaways","title":"Key Takeaways","text":"<ul> <li> <p>It generally makes sense to add the plugin to the root <code>pom.xml</code> in a maven Multi-Module repository so that the   configuration applies to   each module</p> <ul> <li>You might encounter some issues when running Open Sourced OpenRewrite plugin in Multi-module maven projects,   always refer Multi-Module Projects  for known   issues</li> <li>If your issue not listed there with solution, then please create ticket   on GitHub:issues</li> </ul> </li> <li> <p>No Recipe or No Style is run unless explicitly turned on explicitly with setting either in pom.xml or in command line</p> </li> <li>Recipes are classified differently for Source and Test codes. Therefore, it is important to note that not all recipes   executed for test codes.</li> <li>The goals <code>rewrite:run</code> and <code>rewrite:dryRun</code> are configured to fork Maven's life cycle and are a better choice when   running recipes via a stand-alone goal (<code>mvn rewrite:run</code>) because this will trigger all the necessary life-cycle   goals   prior to running rewrite's plugin</li> <li>The goals <code>rewrite:runNoFork</code> and <code>rewrite:dryRunNoFork</code> are more efficient to use them within the context of an   integration build, as these will not cause duplicate life cycle phases to be called</li> <li>My Personnel recommendation, prefer maven phase <code>process-sources</code> for binding <code>run</code> or <code>runNoFork</code> execution,   therefore   making changes in source code performed before unit test and integration tests execution</li> <li>Prefer maven phase <code>prepare-package</code> for binding <code>dryRun</code> or <code>dryRunNoFork</code> execution,   therefore maven build failed early before time-consuming integration tests executed</li> <li>Always configure plugin to execute <code>dryRun</code> and make build fail if any changes exists to avoid adding any new findings</li> <li>Enabled config in such a way recipes applied only on developer workstation and not in CI environment to avoid   commiting unintended changes.</li> <li>Recommendation is always check changes and commit them manually after verification</li> <li>OpenRewrite IntelliJ Plugin really helps to organise and run   recipe in developer workstation</li> </ul>"},{"location":"improvements/code-health-improvements.html","title":"Improve Code Health &amp; Reduce Technical Debt","text":""},{"location":"improvements/code-health-improvements.html#auto-upgrade-dependencies","title":"Auto upgrade dependencies","text":"<ul> <li>Use automated bot to update your project dependencies automatically in order to catch up with latest versions.</li> <li>Renovate provides easy integration and flexible if your organisation use   it. Documentation</li> <li>GitHub Dependent Bot if your repository exists in GitHub, you can use GitHub's   in-house dependent bot for auto updating dependencies.  </li> </ul>"},{"location":"improvements/data-quality.html","title":"Improve Data Quality","text":"<p>List of improvements to improve application data quality.</p>"},{"location":"improvements/data-quality.html#mobile-phone-number","title":"Mobile Phone Number","text":"<ul> <li>Validate mobile number based on real time criteria based country code and length. Refer article for more   info Phone Number Validation.</li> </ul>"},{"location":"improvements/data-quality.html#address-data","title":"Address Data","text":"<ul> <li>GeoCoding APIs improves data quality by converting addresses into   precise geographic coordinates, ensuring location data is accurate and consistently formatted.</li> <li>It minimizes errors in user-entered addresses and enriches data with useful details like postal codes and   administrative regions.</li> <li>Many GeoCoding APIs are available in market including paid and free versions. Some of them as follows,<ul> <li>Google Geocoding API</li> <li>MapTiler GeoCoding API</li> <li>MapBox Geocoding API</li> </ul> </li> </ul>"},{"location":"improvements/documentation-improvements.html","title":"Documentation","text":""},{"location":"improvements/documentation-improvements.html#mkdocs-markdown-documentation","title":"MkDocs - Markdown Documentation","text":"<ul> <li>MkDocs helps us to write any documentation with Markdown   like technical concept, blog, etc.</li> <li>Material for MkDocs provides material theme for documentation</li> <li>Varies plugins available for adding graphs, UML, etc diagrams programmatically</li> </ul>"},{"location":"improvements/documentation-improvements.html#plantuml","title":"PlantUML","text":"<ul> <li>PlantUML helps us to write varies diagrams by writing code</li> <li>PlantUML IDE plugin really helpful for creating UML diagrams</li> </ul>"},{"location":"improvements/web-application-improvements.html","title":"Improvements for Web Application","text":""},{"location":"improvements/web-application-improvements.html#hotkeys-keyboard-shortcuts","title":"HotKeys - Keyboard Shortcuts","text":"<ul> <li>HotKeys improves user's UI/UX experience and boost productivity for   any Web   applications</li> <li>It is really helpful for web application like data entry websites and application having complex navigations</li> <li>One-line takeaways<ul> <li>Don\u2019t override native browser (or OS) shortcuts</li> <li>Support standard shortcuts that don\u2019t contradict the previous rule, and use one or two letter shortcuts for other   actions</li> <li>Always have a consistent system</li> <li>Pay maximum attention to discoverability</li> </ul> </li> <li>e.g. JIRA supporting HotKeys,</li> </ul>"},{"location":"java/email-templates.html","title":"Email Template","text":""},{"location":"java/email-templates.html#freemarker","title":"Freemarker","text":"<ul> <li>Freemarker is one of my favorite template engine for emails</li> <li>It provides rich features to manage complex logics using parent-child template formatting</li> <li>Online FreeMarker Template Tester is really helpful and handy to test your   templates</li> <li>IntelliJ Ultimate support developing freemarker   templates out of the box</li> </ul>"},{"location":"java/email-templates.html#thymeleaf","title":"Thymeleaf","text":"<ul> <li>Thymeleaf is really handy for simple and lightweight email   templates</li> <li>Thymeleaf and SpringMail is one of the best combination in my opinion</li> <li>IntelliJ Ultimate supports thymeleaf development out of the box</li> </ul>"},{"location":"java/email-templates.html#tip","title":"Tip","text":"<ul> <li>Mailpit is email &amp; SMTP testing tool with API, it is really helpful for local   development   to run local SMTP server and visualise using builtin UI and can also be used inn unit and integration testing with   builtin REST API.</li> <li>Implementation Reference: Journey-API </li> </ul>"},{"location":"java/java-notes.html","title":"Java Notes","text":""},{"location":"kubernetes/logs-verification.html","title":"Logs Verification","text":"<p>Login:</p> <pre><code>dexctl --user &lt;user-id&gt;\n</code></pre> <p>List all available contexts:</p> <pre><code>kubectl config get-contexts\n</code></pre> <p>Set current context to targeted one:</p> <pre><code>kubectl config use-context &lt;targeted context&gt;\n</code></pre>"},{"location":"kubernetes/logs-verification.html#logs-for-all-pods-deployment","title":"Logs for all pods / deployment","text":"<p>List deployments:</p> <pre><code>kubectl get deployments -n &lt;target namespace&gt;\n</code></pre> <p>List logs for all pods:</p> <pre><code>kubectl logs deployments/&lt;deployment name&gt;\n</code></pre>"},{"location":"kubernetes/logs-verification.html#logs-for-a-particular-pod","title":"Logs for a particular pod","text":"<p>List all pods:</p> <pre><code>kubectl get pods -n &lt;target namespace&gt;\n</code></pre> <p>List logs for a particular pod:</p> <pre><code>kubectl logs &lt;targted pod name&gt;\n</code></pre>"},{"location":"kubernetes/useful-commands.html","title":"Useful Kubernetes Commands","text":""},{"location":"kubernetes/useful-commands.html#debugging-pod","title":"Debugging Pod","text":"<ul> <li>Sometimes we may need to connect to a Kubernetes pod to perform simple tasks like executing simple commands, checking   connectivity from pod to other networks, for such activities the below debug command really helps Developer who does   not have much knowledge about Kubernetes</li> <li>Check kubectl debug to know more</li> </ul> <pre><code>kubectl --cluster=&lt;cluster name&gt; -n &lt;namespace&gt; debug &lt;targeted pod&gt; --image=internal/koopa/toolbox-image:latest -it\n</code></pre>"},{"location":"security/password-security.html","title":"Password Improvements","text":""},{"location":"security/password-security.html#prevent-using-weak-passwords","title":"Prevent using Weak Passwords","text":"<ul> <li>zxcvbn library helps to measure password strength in terms of score against   common   english words, common patterns &amp; sequences and even we can customize rule base with custom dictionaries</li> <li>Measure user's password strength and prevent user's to use password for which strength score less than allowed (e.g.   prevent score less 3 out of 5)</li> </ul>"},{"location":"security/password-security.html#prevent-using-leaked-passwords","title":"Prevent using Leaked Passwords","text":"<ul> <li>HaveIBeenPwned allows you to search across multiple data breaches to see if your email   address or phone number has been compromised.</li> <li>It supports REST API as well</li> <li>It has leaked password database and has secured way to compare passwords using hashing techniques</li> <li>Tip: Spring Security has HaveIBeenPwnedRestApiPasswordChecker API which helps application to securely connect to   the HaveIBeenPwned service  </li> </ul>"},{"location":"security/penetration-testing.html","title":"Penetration Testing","text":""},{"location":"security/penetration-testing.html#penetration-testing","title":"Penetration Testing","text":"<ul> <li>Below are the list of Open Web Application Security Projects (OWASP) Testing Guide checklist to perform pen-testing</li> <li>The below checklist is of my own interest, feel free to add if you have one</li> <li>Star (\u2b50) denoted testing is strongly recommended for testing web applications</li> </ul> Category Testing Guide Remarks Information Gathering Conduct Search Engine Discovery and Reconnaissance for Information Leakage Fingerprint Web Server \u2b50 Review Webserver Metafiles for Information Leakage \u2b50 Enumerate Applications on Webserver \u2b50 Review Webpage Comments and Metadata for Information Leakage \u2b50 Identify application entry points Map execution paths through application Fingerprint Web Application Framework \u2b50 Fingerprint Web Application Map Application Architecture Configuration and Deploy Management Testing Test Network/Infrastructure Configuration Test Application Platform Configuration Test File Extensions Handling for Sensitive Information Review Old, Backup and Unreferenced Files for Sensitive Information Enumerate Infrastructure and Application Admin Interfaces \u2b50 Test HTTP Methods \u2b50 Test HTTP Strict Transport Security \u2b50 Test RIA Cross Domain Policy Test File Permission Test for Subdomain Takeover Test Cloud Storage Identity Management Testing Test Role Definitions Test User Registration Process Test Account Provisioning Process Testing for Account Enumeration and Guessable User Account \u2b50 Testing for Weak or Unenforced Username Policy \u2b50 Authentication Testing  Testing for Credentials Transported over an Encrypted Channel Testing for Default Credentials Testing for Weak Lock Out Mechanism Testing for Bypassing Authentication Schema Testing for Vulnerable Remember Password Testing for Browser Cache Weaknesses Testing for Weak Password Policy Testing for Weak Security Question Answer Testing for Weak Password Change or Reset Functionalities Testing for Weaker Authentication in Alternative Channel Authorization Testing Testing Directory Traversal File Include Testing for Bypassing Authorization Schema Testing for Privilege Escalation Testing for Insecure Direct Object References Session Management Testing Testing for Session Management Schema Testing for Cookies Attributes Testing for Session Fixation Testing for Exposed Session Variables Testing for Cross Site Request Forgery Testing for Logout Functionality Testing Session Timeout Testing for Session Puzzling Data Validation Testing Testing for Reflected Cross Site Scripting \u2b50 Testing for Stored Cross Site Scripting Testing for HTTP Verb Tampering \u2b50 Testing for HTTP Parameter Pollution \u2b50 Testing for SQL Injection Testing for Oracle Testing for MySQL Testing for SQL Server Testing PostgreSQL Testing for MS Access Testing for NoSQL Injection Testing for LDAP Injection Testing for ORM Injection Testing for XML Injection Testing for SSI Injection Testing for XPath Injection Testing for IMAP SMTP Injection Testing for Code Injection Testing for Local File Inclusion Testing for Remote File Inclusion Testing for Command Injection Testing for Format String Injection Testing for Incubated Vulnerability Testing for HTTP Splitting Smuggling Testing for HTTP Incoming Requests Testing for Client-side Testing for Host Header Injection Testing for Server-side Template Injection Error Handling Testing for Improper Error Handling \u2b50 Cryptography Testing for Weak Encryption \u2b50 Testing for Padding Oracle \u2b50 Testing for Sensitive Information Sent via Unencrypted Channels \u2b50 Testing for Weak Transport Layer Security \u2b50 Business Logic Testing Test Business Logic Data Validation  Test Ability to Forge Requests \u2b50 Test Integrity Checks Test for Process Timing \u2b50 Test Number of Times a Function Can Be Used Limits \u2b50 Testing for the Circumvention of Work Flows \u2b50 Test Defenses Against Application Misuse \u2b50 Test Upload of Unexpected File Types Test Upload of Malicious Files Client Side Testing Testing for DOM-Based Cross Site Scripting \u2b50 Testing for JavaScript Execution Testing for HTML Injection Testing for Client-side URL Redirect Testing for CSS Injection Testing for Client-side Resource Manipulation Testing Cross Origin Resource Sharing Testing for Cross Site Flashing Testing for Clickjacking Testing WebSockets Testing Web Messaging Testing Browser Storage Testing for Cross Site Script Inclusion"},{"location":"security/secure-coding.html","title":"Secure Coding","text":""},{"location":"security/secure-coding.html#clean-as-you-code","title":"Clean As You Code","text":"<ul> <li>SonarLint Plugin for IDE: Detect bugs and code smells as early as   possible while you code   You can even bind your organisation's quality gate rules if exists any</li> <li>SonarCloud does support Clean as You code   policy for your open source projects. It is free of cost for open source projects.</li> </ul>"},{"location":"security/secure-coding.html#xss-encode-for-client","title":"XSS: Encode for client","text":"<ul> <li> <p>OWASP Java Encoder helps to encode values based on client use case to   avoid any XSS attack</p> </li> <li> <p>Similar to html, dedicated methods available for CSS(<code>forCssString</code>) and JS (<code>forJavaScript</code>) as well</p> </li> <li>Similarly different encoding methods available for script/style   attribute(<code>forJavaScriptAttribute, forCssString-</code>), block (<code>forJavaScriptBlock</code>) and URL   components (<code>forCssUrl, forJavaScriptSource</code>) parameter   <pre><code>// when you want to place json properties inside &lt;script type=\"application/json\"&gt;${toJson()}&lt;/script&gt; in html\npublic String toJson() {\n  ObjectMapper objectMapper = new ObjectMapper();\n  try {\n    return Encode.forHtmlContent(objectMapper.writeValueAsString(this));\n  } catch (JsonProcessingException ex) {\n    log.error(\"Serialization error.\", ex);\n  }\n  return null;\n}\n</code></pre></li> </ul>"},{"location":"security/secure-coding.html#obfuscate-sensitive-information","title":"Obfuscate Sensitive Information","text":"<ul> <li>Sensitive information like username, password and OneTimeToken, sometimes unknowingly logged in log files, and it   might   lead to potential information leak</li> <li>To avoid such accidental information leak, it is always recommended to obfuscate such information either partially or   completely</li> <li>example overriding default toString() to obfuscate complete information as follows</li> </ul> <pre><code>  record Password(String value) {\n    @Override\n    public String toString() {\n        return \"Password { 'value': '***' }\";\n    }\n}\n</code></pre> <ul> <li>example obfuscate partial information about email address</li> </ul> <pre><code>record EmailAddress(String value) {\n    @Override\n    public String toString() {\n        return \"EmailAddress {'value': '%s'}\".formatted(EmailAddressObfuscator.obfuscate(value));\n    }\n}\n\n\n/**\n * Obfuscates an email address by starring the local part (username), except the first character.\n * &lt;p&gt;\n * If the local part has only one character, then this will be starred.\n * &lt;/p&gt;\n * &lt;p&gt;\n * For example the email address &lt;c&gt;name.surname@example.com&lt;/c&gt; will be obfuscated as &lt;c&gt;n***********@example.com&lt;/c&gt;.\n * &lt;/p&gt;\n */\npublic final class EmailAddressObfuscator {\n    private static final String EMAIL_ADDRESS_SEPARATOR = \"@\";\n    private static final int NO_VISIBLE_LOCAL_PART_CHARS = 1;\n    private static final String MASK_CHAR = \"*\";\n\n    private EmailAddressObfuscator() {\n        throw new UnsupportedOperationException(\"This is a utility class and cannot be instantiated\");\n    }\n\n\n    private static String getNonLocalPart(String emailAddress) {\n        return StringUtils.substringAfterLast(emailAddress, EMAIL_ADDRESS_SEPARATOR);\n    }\n\n    private static String getLocalPart(String emailAddress) {\n        return StringUtils.substringBeforeLast(emailAddress, EMAIL_ADDRESS_SEPARATOR);\n    }\n\n    private static String obfuscateLocalPart(String emailAddress) {\n        String localPart = getLocalPart(emailAddress);\n        return StringUtils.substring(localPart, 0, NO_VISIBLE_LOCAL_PART_CHARS)\n                + StringUtils.repeat(MASK_CHAR, StringUtils.length(localPart) - NO_VISIBLE_LOCAL_PART_CHARS);\n    }\n\n    private static String getObfuscateValue(String emailAddress) {\n        return obfuscateLocalPart(emailAddress) + EMAIL_ADDRESS_SEPARATOR + getNonLocalPart(emailAddress);\n    }\n\n\n    public static String obfuscate(final String emailAddress) {\n        return Optional.ofNullable(emailAddress)\n                .filter(StringUtils::isNotBlank)\n                .map(EmailAddressObfuscator::getObfuscateValue).orElse(\"\");\n    }\n\n}\n</code></pre>"},{"location":"testings/automation-tips.html","title":"Automation Test Suite Tips","text":""},{"location":"testings/automation-tips.html#maven-failsafe-plugin","title":"maven-failsafe-plugin","text":"<ul> <li>maven-failsafe-plugin provides rich features for   integration and automation tests. If possible and suitable for your project case, use it</li> <li><code>rerunFailingTestsCount</code> is really useful feature to rerun failing tests at the end of the build   reference.</li> </ul>"},{"location":"testings/testing-tools.html","title":"Testing Tools","text":""},{"location":"testings/testing-tools.html#test-data-intellij-ide-plugin","title":"Test Data - IntelliJ IDE Plugin","text":"<ul> <li>Test Data can generate all sorts of randomized data including   Text, UUID, Numbers, Date &amp; Time, and Custom types such as popular ones like JSON, CSV, and SQL</li> <li>The plugin adds a context action 'Test Data' to generate data</li> </ul>"},{"location":"testings/testing-tools.html#restfultool-intellij-ide-plugin","title":"RestFulTool - IntelliJ IDE Plugin","text":"<ul> <li>RestFulTool offers a window to make REST API calls all from   IDE</li> <li>The plugin provides a bunch of tools for Restful Service development</li> <li>It has great integration support for Spring MVC and Spring Boot</li> </ul>"},{"location":"testings/testing-tools.html#http-client-intellij-ide-plugin","title":"HTTP Client - IntelliJ IDE Plugin","text":"<ul> <li>HTTP Client helps to create, edit, and   execute HTTP requests directly in the IntelliJ IDEA code editor.</li> <li>It provides varies features like configuring env variable file with support for environments like dev, qa and live.</li> <li>Please refer HowTo:HTTP Client - IntelliJ Plugin</li> </ul>"}]}